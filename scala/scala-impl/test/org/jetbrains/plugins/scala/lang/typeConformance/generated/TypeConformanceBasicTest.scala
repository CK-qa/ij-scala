package org.jetbrains.plugins.scala.lang.typeConformance
package generated

class TypeConformanceBasicTest extends TypeConformanceTestBase {
  //This class was generated by build script, please don't change this
  override def folderPath: String = super.folderPath + "basic/"

  def testAbstractType(): Unit = {doTest()}

  def testAliasBounds(): Unit = {doTest()}

  def testAliasBounds2(): Unit = {doTest()}

  def testAliasBounds3(): Unit = {doTest()}

  def testAnyRef(): Unit = {doTest()}

  def testAnyVal1(): Unit = {doTest()}

  def testAnyVal2(): Unit = {doTest()}

  def testAnyVal3(): Unit = {doTest()}

  def testAnyVal4(): Unit = {doTest()}

  def testAnyVal5(): Unit = {doTest()}

  def testBasicConformance(): Unit = {doTest()}

  def testBasicNonConformance(): Unit = {doTest()}

  def testDependentEnumBaseTypes(): Unit = {doTest()}

  def testFloat(): Unit = {doTest()}

  def testFunctionFalseConformance(): Unit = {doTest()}

  def testFunctionPlaceholderMatch(): Unit = {doTest()}

  def testFunctionRightConformance(): Unit = {doTest()}

  def testHashSetIsSet(): Unit = {doTest()}

  def testImplicitInixParamClause(): Unit = {doTest()}

  def testIsDefinedAt(): Unit = {doTest()}

  def testNullConformance(): Unit = {doTest()}

  def testStringLiteralToObject(): Unit = {doTest()}

  def testTupleConformance(): Unit = {doTest()}

  def testTupleRightConformance(): Unit = {doTest()}

  def testTupleToConformance(): Unit = {doTest()}

  def testTupleToProductNoConformance(): Unit = {doTest()}

  def testSCL9506(): Unit = {
    doTest(
      s"""object TicketTester {
         |  trait A {
         |    private type This = A
         |
         |    def something: This = this
         |  }
         |
         |  class B extends A {
         |    private type This = B
         |
         |    ${caretMarker}val aThis: This = super.something
         |  }
         |}
         |//false
      """.stripMargin)
  }
}