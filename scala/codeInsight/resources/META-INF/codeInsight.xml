<?xml version="1.0" encoding="iso-8859-1"?>

<idea-plugin>

    <extensions defaultExtensionNs="com.intellij">
        <generation.toStringClassFilter
                implementation="org.jetbrains.plugins.scala.codeInsight.generation.GenerateToStringScalaClassFilter"/>

        <highlightVisitor
                implementation="org.jetbrains.plugins.scala.codeInsight.daemon.ScalaAnnotatorHighlightVisitor"/>
        <highlightVisitor implementation="org.jetbrains.plugins.scala.codeInsight.daemon.ScalaRainbowVisitor"/>

        <daemon.changeLocalityDetector implementation="org.jetbrains.plugins.scala.codeInsight.daemon.ScalaChangeLocalityDetector"/>

        <highlightingPassFactory implementation="org.jetbrains.plugins.scala.codeInsight.implicits.ImplicitHintsPassFactory"/>

        <highlightErrorFilter
                implementation="org.jetbrains.plugins.scala.codeInsight.highlighting.ScalaDocHighlightErrorFilter"/>
        <highlightErrorFilter
                implementation="org.jetbrains.plugins.scala.codeInsight.highlighting.ScalaHighlightErrorFilter"/>

        <lang.quoteHandler language="Scala"
                           implementationClass="org.jetbrains.plugins.scala.codeInsight.editorActions.ScalaQuoteHandler"/>

        <declarationRangeHandler key="org.jetbrains.plugins.scala.lang.psi.api.statements.ScFunction"
                                 implementationClass="org.jetbrains.plugins.scala.codeInsight.hint.ScFunctionDeclarationRangeHandler"
                                 order="first"/>
        <declarationRangeHandler key="org.jetbrains.plugins.scala.lang.psi.api.toplevel.typedef.ScTemplateDefinition"
                                 implementationClass="org.jetbrains.plugins.scala.codeInsight.hint.ScTemplateDeclarationRangeHandler"
                                 order="first"/>

        <config.inlaySettingsProvider implementation="org.jetbrains.plugins.scala.codeInsight.hints.ScalaTypeHintsSettingsProvider" />

        <defaultLiveTemplates file="liveTemplates/scala"/>
        <liveTemplatePreprocessor implementation="org.jetbrains.plugins.scala.codeInsight.template.impl.ScalaTemplatePreprocessor"/>
        <liveTemplateContext implementation="org.jetbrains.plugins.scala.codeInsight.template.impl.ScalaFileTemplateContextType"/>
        <liveTemplateContext implementation="org.jetbrains.plugins.scala.codeInsight.template.impl.ScalaXmlContextType"/>
        <liveTemplateContext implementation="org.jetbrains.plugins.scala.codeInsight.template.impl.ScalaCommentContextType"/>
        <liveTemplateContext implementation="org.jetbrains.plugins.scala.codeInsight.template.impl.ScalaStringContextType"/>
        <liveTemplateContext implementation="org.jetbrains.plugins.scala.codeInsight.template.impl.ScalaCodeContextType"/>
        <liveTemplateContext implementation="org.jetbrains.plugins.scala.codeInsight.template.impl.ScalaImplicitValueClassContextType"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaAnnotatedMacro"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaVariableOfTypeMacro$RegularVariable"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaVariableOfTypeMacro$ArrayVariable"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaVariableOfTypeMacro$IterableVariable"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaClassNameMacro"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaSuggestVariableNameByTypeMacro"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaImplicitValueClassNameMacro"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaComponentTypeOfMacro"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaCurrentPackageMacro"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaExpressionTypeMacro"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaIterableComponentTypeMacro"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaMethodNameMacro"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaMethodParametersMacro"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaMethodReturnTypeMacro"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaQualifiedClassNameMacro"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaSubtypesMacro"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaTypeOfVariableMacro"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaPrimaryConstructorMacro$Params"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaPrimaryConstructorMacro$ParamNames"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaPrimaryConstructorMacro$ParamTypes"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaTypeParametersMacro"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaTypeParametersWithoutBoundsMacro"/>
        <liveTemplateMacro implementation="org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaCompanionClassMacro"/>

        <localInspection
                implementationClass="org.jetbrains.plugins.scala.codeInspection.recursion.NoTailRecursionAnnotationInspection"
                bundle="messages.ScalaCodeInsightBundle"
                key="no.tailrec.annotation.title"
                groupPath="Scala" groupName="General"
                shortName="NoTailRecursionAnnotation"
                language="Scala" level="WARNING"
                enabledByDefault="true"/>

        <intentionAction>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.declarations.ChangeAccessModifierIntention</className>
            <category>Scala</category>
        </intentionAction>

        <intentionAction>
            <category>Scala/Argument Conversion</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.argument.AddNameToArgumentIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Argument Conversion</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.argument.ArgumentToBlockExpressionIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Argument Conversion</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.argument.BlockExpressionToArgumentIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Argument Conversion</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.argument.PermuteArgumentsIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Boolean</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.booleans.DeMorganLawIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Boolean</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.booleans.ExpandBooleanIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Boolean</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.booleans.FlipComparisonInInfixExprIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Boolean</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.booleans.FlipComparisonInMethodCallExprIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Boolean</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.booleans.NegateComparisonIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Boolean</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.booleans.ReplaceEqualsOrEqualityInInfixExprIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Boolean</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.booleans.ReplaceEqualsOrEqualityInMethodCallExprIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Boolean</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.booleans.SimplifyBooleanExprWithLiteralIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Control flow</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.controlFlow.InvertIfConditionIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Control flow</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.controlFlow.MergeElseIfIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Control flow</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.controlFlow.MergeIfToAndIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Control flow</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.controlFlow.MergeIfToOrIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Control flow</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.controlFlow.RemoveRedundantElseIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Control flow</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.controlFlow.ReplaceDoWhileWithWhileIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Control flow</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.controlFlow.ReplaceWhileWithDoWhileIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Control flow</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.controlFlow.SplitElseIfIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Control flow</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.controlFlow.SplitIfIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Strings/Formatted strings</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.stringLiteral.FormatConversionIntention$FormattedToStringConcatenation</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Strings/Formatted strings</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.stringLiteral.FormatConversionIntention$FormattedToInterpolated</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Strings/Interpolated strings</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.stringLiteral.FormatConversionIntention$InterpolatedToStringConcatenation</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Strings/Interpolated strings</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.stringLiteral.FormatConversionIntention$InterpolatedToFormatted</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Strings/String concatenations</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.stringLiteral.FormatConversionIntention$StringConcatenationToFormatted</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Strings/String concatenations</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.stringLiteral.FormatConversionIntention$StringConcatenationToInterpolated</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Strings</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.stringLiteral.AddReplaceSlashRToMLStringIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Strings</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.stringLiteral.AddStripMarginToMLStringIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Strings</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.stringLiteral.InsertGapIntoStringIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Strings</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.stringLiteral.StringToMultilineStringIntention</className>
        </intentionAction>

        <intentionAction>
            <category>Scala/Recursion</category>
            <className>org.jetbrains.plugins.scala.codeInsight.intention.recursion.AddTailRecursionAnnotationIntention</className>
        </intentionAction>
    </extensions>

    <extensions defaultExtensionNs="com.intellij.codeInsight">
        <parameterNameHints language="Scala"
                            implementationClass="org.jetbrains.plugins.scala.codeInsight.hints.ScalaInlayParameterHintsProvider"/>
        <delegateMethods language="Scala"
                         implementationClass="org.jetbrains.plugins.scala.codeInsight.delegate.ScalaGenerateDelegateHandler"/>
    </extensions>

    <applicationListeners>
        <listener class="org.jetbrains.plugins.scala.codeInsight.implicits.MouseHandler" topic="com.intellij.openapi.project.ProjectManagerListener"/>
    </applicationListeners>

    <actions>
        <action id="Scala.ShowImplicits" class="org.jetbrains.plugins.scala.codeInsight.implicits.ShowImplicitHintsAction">
            <add-to-group group-id="CodeEditorViewGroup" anchor="last"/>
        </action>

        <action id="Scala.ExpandImplicits" class="org.jetbrains.plugins.scala.codeInsight.implicits.ExpandImplicitHintsAction">
            <add-to-group group-id="CodeEditorViewGroup" anchor="after" relative-to-action="Scala.ShowImplicits"/>
        </action>

        <group id="ScalaGenerateGroup">
            <separator/>
            <action id="Scala.GenerateEquals" class="org.jetbrains.plugins.scala.codeInsight.generation.actions.ScalaGenerateEqualsAction" />
            <action id="Scala.GenerateToString" class="org.jetbrains.plugins.scala.codeInsight.generation.actions.ScalaGenerateToStringAction" />
            <action id="Scala.GenerateCompanionObject" class="org.jetbrains.plugins.scala.codeInsight.generation.actions.ScalaGenerateCompanionObjectAction"/>
            <action id="Scala.GenerateProperty" class="org.jetbrains.plugins.scala.codeInsight.generation.actions.ScalaGeneratePropertyAction" />
            <add-to-group group-id="GenerateGroup"/>
        </group>

        <group id="TypeHintsMenu">
            <action id="ToggleTypeHints" class="org.jetbrains.plugins.scala.codeInsight.hints.ScalaTypeHintsConfigurable$ToggleTypeHintsAction"/>
            <action id="ToggleTypeMismatchHints" class="org.jetbrains.plugins.scala.annotator.TypeMismatchToggleAction"/>
            <action id="Scala.ToggleMethodChainInlayHints" class="org.jetbrains.plugins.scala.codeInsight.hints.ScalaTypeHintsConfigurable$ToggleMethodChainInlayHintsAction" />
            <separator />
            <action id="Scala.ConfigureTypeHints" class="org.jetbrains.plugins.scala.codeInsight.hints.ScalaTypeHintsConfigurable$ConfigureTypeHintActions"/>
        </group>
        <group id="ImplicitConversionMenu">
            <action id="MakeExplicit" class="org.jetbrains.plugins.scala.codeInsight.implicits.menu.MakeConversionExplicit"/>
            <separator/>
            <reference ref="Scala.ShowImplicits" />
            <reference ref="Scala.ExpandImplicits" />
        </group>

        <group id="ImplicitArgumentsMenu">
            <action id="ExplicitArgumentMenu.ShowImplicitArgumentsPopup" class="org.jetbrains.plugins.scala.codeInsight.implicits.menu.ImplicitArgumentsPopup"/>
            <separator/>
            <reference ref="Scala.ShowImplicits" />
            <reference ref="Scala.ExpandImplicits" />
        </group>

        <group id="ExplicitArgumentsMenu">
            <action id="RemoveExplicitArguments" class="org.jetbrains.plugins.scala.codeInsight.implicits.menu.RemoveExplicitArguments" />
            <separator/>
            <reference ref="Scala.ShowImplicits" />
            <reference ref="Scala.ExpandImplicits" />
        </group>
    </actions>
</idea-plugin>
