package nyaya
package object prop extends scala.AnyRef {
  case class Input(val a : scala.Any) extends scala.AnyRef with scala.Product with scala.Serializable {
    def show : scala.Predef.String = { /* compiled code */ }
  }
  type Name = scalaz.Need[scala.Predef.String]
  type FailureReason = scala.Predef.String
  type FailureReasonO = scala.Option[nyaya.prop.FailureReason]
  type Eval_[x] = nyaya.prop.Eval
  type EvalL = nyaya.prop.Logic[nyaya.prop.Eval_, scala.Nothing]
  type Prop[A] = nyaya.prop.Logic[nyaya.prop.PropA, A]
  implicit final class Prop_AnyExt[A](a : A) extends scala.AnyVal {
    @scala.annotation.elidable(2000)
    def assertSatisfies(p : nyaya.prop.Prop[A]) : scala.Unit = { /* compiled code */ }
  }
  implicit final class LogicPropExt[A](prop : nyaya.prop.Prop[A]) extends scala.AnyVal {
    @scala.inline
    def apply(a : A) : nyaya.prop.Eval = { /* compiled code */ }
    @scala.inline
    def forall[B, F[_]](f : scala.Function1[B, F[A]])(implicit evidence$1 : scalaz.Foldable[F]) : nyaya.prop.Prop[B] = { /* compiled code */ }
    @scala.inline
    def forallS[B, F[_], C](f : scala.Function1[B, F[C]])(implicit evidence$2 : scalaz.Foldable[F], ev : scala.Predef.<:<[C, A]) : nyaya.prop.Prop[B] = { /* compiled code */ }
    @scala.inline
    def forallF[F[_]](implicit evidence$3 : scalaz.Foldable[F]) : nyaya.prop.Prop[F[A]] = { /* compiled code */ }
    @scala.inline
    @scala.annotation.elidable(2000)
    def assert(a : A) : scala.Unit = { /* compiled code */ }
  }
}
