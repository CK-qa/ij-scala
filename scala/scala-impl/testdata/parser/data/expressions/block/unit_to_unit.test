class A{
def tryMatch =
      x match {
        case None => () => ();
        case Some(Pair(p, r)) =>
      }
}
-----
ScalaFile
  ScClass: A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n')
        ScFunctionDefinition: tryMatch
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('tryMatch')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n      ')
          MatchStatement
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n        ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                StableElementPattern
                  ReferenceExpression: None
                    PsiElement(identifier)('None')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  FunctionExpression
                    Parameters
                      ParametersClause
                        PsiElement(()('(')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    BlockOfExpressions
                      UnitExpression
                        PsiElement(()('(')
                        PsiElement())(')')
                      PsiElement(;)(';')
              PsiWhiteSpace('\n        ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: Some
                    PsiElement(identifier)('Some')
                  Pattern Argument List
                    PsiElement(()('(')
                    ConstructorPattern
                      CodeReferenceElement: Pair
                        PsiElement(identifier)('Pair')
                      Pattern Argument List
                        PsiElement(()('(')
                        ReferencePattern: p
                          PsiElement(identifier)('p')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ReferencePattern: r
                          PsiElement(identifier)('r')
                        PsiElement())(')')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                BlockOfExpressions
                  <empty list>
            PsiWhiteSpace('\n      ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
